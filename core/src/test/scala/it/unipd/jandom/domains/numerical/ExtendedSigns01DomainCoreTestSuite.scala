package it.unipd.jandom.domains.numerical

import it.unipd.jandom.domains.numerical.sign.ES01._
import org.scalatest.FunSuite

/**
  * Note: hereafter, ES01 will stand for ExtendedSigns01Domain.
  * Test class for ES01's core.
  */
class ExtendedSigns01DomainCoreTestSuite extends FunSuite {

  import it.unipd.jandom.domains.numerical.sign.ExtendedSigns01DomainCore._

  test("toES01") {
    assert(Zero.equals(alpha(0)))
    assert(One.equals(alpha(1)))
    assert(GTOne.equals(alpha(2)))
    assert(GTOne.equals(alpha(100)))
    assert(Negative.equals(alpha(-1)))
    assert(Negative.equals(alpha(-1000)))
  }

  test("inverse") {
    assert(ES01Top.equals(inverse(Negative)))
    assert(Zero.equals(inverse(Zero)))
    assert(Negative.equals(inverse(One)))
    assert(Negative.equals(inverse(GTOne)))
    assert(ES01Top.equals(inverse(ES01Top)))
    assert(ES01Bottom.equals(inverse(ES01Bottom)))
  }

  test("sum") {
    assert(Negative.equals(sum(Negative, Negative)))
    assert(Zero.equals(sum(Zero, Zero)))
    assert(GTOne.equals(sum(One, One)))
    assert(GTOne.equals(sum(GTOne, GTOne)))
    assert(Negative.equals(sum(Negative, Zero)))
    assert(Negative.equals(sum(Zero, Negative)))
    assert(ES01Top.equals(sum(One, Negative)))
    assert(ES01Top.equals(sum(Negative, One)))
    assert(ES01Top.equals(sum(GTOne, Negative)))
    assert(ES01Top.equals(sum(Negative, GTOne)))
    assert(One.equals(sum(Zero, One)))
    assert(One.equals(sum(One, Zero)))
    assert(GTOne.equals(sum(Zero, GTOne)))
    assert(GTOne.equals(sum(GTOne, Zero)))
    assert(GTOne.equals(sum(One, GTOne)))
    assert(GTOne.equals(sum(GTOne, One)))
    assert(ES01Top.equals(sum(Negative, ES01Top)))
    assert(ES01Top.equals(sum(Zero, ES01Top)))
    assert(ES01Top.equals(sum(One, ES01Top)))
    assert(ES01Top.equals(sum(GTOne, ES01Top)))
    assert(ES01Top.equals(sum(ES01Top, Negative)))
    assert(ES01Top.equals(sum(ES01Top, Zero)))
    assert(ES01Top.equals(sum(ES01Top, One)))
    assert(ES01Top.equals(sum(ES01Top, GTOne)))
    assert(ES01Bottom.equals(sum(Negative, ES01Bottom)))
    assert(ES01Bottom.equals(sum(Zero, ES01Bottom)))
    assert(ES01Bottom.equals(sum(One, ES01Bottom)))
    assert(ES01Bottom.equals(sum(GTOne, ES01Bottom)))
    assert(ES01Bottom.equals(sum(ES01Bottom, Negative)))
    assert(ES01Bottom.equals(sum(ES01Bottom, Zero)))
    assert(ES01Bottom.equals(sum(ES01Bottom, One)))
    assert(ES01Bottom.equals(sum(ES01Bottom, GTOne)))
  }

  test("mult") {
    assert(ES01Top.equals(mult(Negative, Negative)))
    assert(Zero.equals(mult(Zero, Zero)))
    assert(One.equals(mult(One, One)))
    assert(GTOne.equals(mult(GTOne, GTOne)))
    assert(Zero.equals(mult(Negative, Zero)))
    assert(Zero.equals(mult(Zero, Negative)))
    assert(Negative.equals(mult(One, Negative)))
    assert(Negative.equals(mult(Negative, One)))
    assert(Negative.equals(mult(GTOne, Negative)))
    assert(Negative.equals(mult(Negative, GTOne)))
    assert(Zero.equals(mult(Zero, One)))
    assert(Zero.equals(mult(One, Zero)))
    assert(Zero.equals(mult(Zero, GTOne)))
    assert(Zero.equals(mult(GTOne, Zero)))
    assert(GTOne.equals(mult(One, GTOne)))
    assert(GTOne.equals(mult(GTOne, One)))
    assert(ES01Top.equals(mult(Negative, ES01Top)))
    assert(Zero.equals(mult(Zero, ES01Top)))
    assert(ES01Top.equals(mult(One, ES01Top)))
    assert(ES01Top.equals(mult(GTOne, ES01Top)))
    assert(ES01Top.equals(mult(ES01Top, Negative)))
    assert(Zero.equals(mult(ES01Top, Zero)))
    assert(ES01Top.equals(mult(ES01Top, One)))
    assert(ES01Top.equals(mult(ES01Top, GTOne)))
    assert(ES01Bottom.equals(mult(Negative, ES01Bottom)))
    assert(ES01Bottom.equals(mult(Zero, ES01Bottom)))
    assert(ES01Bottom.equals(mult(One, ES01Bottom)))
    assert(ES01Bottom.equals(mult(GTOne, ES01Bottom)))
    assert(ES01Bottom.equals(mult(ES01Bottom, Negative)))
    assert(ES01Bottom.equals(mult(ES01Bottom, Zero)))
    assert(ES01Bottom.equals(mult(ES01Bottom, One)))
    assert(ES01Bottom.equals(mult(ES01Bottom, GTOne)))
  }

  test("division") {
    assert(ES01Top.equals(division(Negative, Negative)))
    assert(ES01Bottom.equals(division(Zero, Zero)))
    assert(One.equals(division(One, One)))
    assert(ES01Top.equals(division(GTOne, GTOne)))
    assert(ES01Bottom.equals(division(Negative, Zero)))
    assert(Zero.equals(division(Zero, Negative)))
    assert(ES01Top.equals(division(One, Negative)))
    assert(Negative.equals(division(Negative, One)))
    assert(ES01Top.equals(division(GTOne, Negative)))
    assert(ES01Top.equals(division(Negative, GTOne)))
    assert(Zero.equals(division(Zero, One)))
    assert(ES01Bottom.equals(division(One, Zero)))
    assert(Zero.equals(division(Zero, GTOne)))
    assert(ES01Bottom.equals(division(GTOne, Zero)))
    assert(Zero.equals(division(One, GTOne)))
    assert(GTOne.equals(division(GTOne, One)))
    assert(ES01Top.equals(division(Negative, ES01Top)))
    assert(Zero.equals(division(Zero, ES01Top)))
    assert(ES01Top.equals(division(One, ES01Top)))
    assert(ES01Top.equals(division(GTOne, ES01Top)))
    assert(ES01Top.equals(division(ES01Top, Negative)))
    assert(ES01Bottom.equals(division(ES01Top, Zero)))
    assert(ES01Top.equals(division(ES01Top, One)))
    assert(ES01Top.equals(division(ES01Top, GTOne)))
    assert(ES01Bottom.equals(division(Negative, ES01Bottom)))
    assert(ES01Bottom.equals(division(Zero, ES01Bottom)))
    assert(ES01Bottom.equals(division(One, ES01Bottom)))
    assert(ES01Bottom.equals(division(GTOne, ES01Bottom)))
    assert(ES01Bottom.equals(division(ES01Bottom, Negative)))
    assert(ES01Bottom.equals(division(ES01Bottom, Zero)))
    assert(ES01Bottom.equals(division(ES01Bottom, One)))
    assert(ES01Bottom.equals(division(ES01Bottom, GTOne)))
  }

  test("remainder") {
    assert(ES01Top.equals(remainder(Negative, Negative)))
    assert(ES01Bottom.equals(remainder(Zero, Zero)))
    assert(Zero.equals(remainder(One, One)))
    assert(ES01Top.equals(remainder(GTOne, GTOne)))
    assert(ES01Bottom.equals(remainder(Negative, Zero)))
    assert(Zero.equals(remainder(Zero, Negative)))
    assert(ES01Top.equals(remainder(One, Negative)))
    assert(Zero.equals(remainder(Negative, One)))
    assert(ES01Top.equals(remainder(GTOne, Negative)))
    assert(ES01Top.equals(remainder(Negative, GTOne)))
    assert(Zero.equals(remainder(Zero, One)))
    assert(ES01Bottom.equals(remainder(One, Zero)))
    assert(Zero.equals(remainder(Zero, GTOne)))
    assert(ES01Bottom.equals(remainder(GTOne, Zero)))
    assert(One.equals(remainder(One, GTOne)))
    assert(Zero.equals(remainder(GTOne, One)))
    assert(ES01Top.equals(remainder(Negative, ES01Top)))
    assert(Zero.equals(remainder(Zero, ES01Top)))
    assert(ES01Top.equals(remainder(One, ES01Top)))
    assert(ES01Top.equals(remainder(GTOne, ES01Top)))
    assert(ES01Top.equals(remainder(ES01Top, Negative)))
    assert(ES01Bottom.equals(remainder(ES01Top, Zero)))
    assert(Zero.equals(remainder(ES01Top, One)))
    assert(ES01Top.equals(remainder(ES01Top, GTOne)))
    assert(ES01Bottom.equals(remainder(Negative, ES01Bottom)))
    assert(ES01Bottom.equals(remainder(Zero, ES01Bottom)))
    assert(ES01Bottom.equals(remainder(One, ES01Bottom)))
    assert(ES01Bottom.equals(remainder(GTOne, ES01Bottom)))
    assert(ES01Bottom.equals(remainder(ES01Bottom, Negative)))
    assert(ES01Bottom.equals(remainder(ES01Bottom, Zero)))
    assert(ES01Bottom.equals(remainder(ES01Bottom, One)))
    assert(ES01Bottom.equals(remainder(ES01Bottom, GTOne)))
  }

  test("lub") {
    assert(Negative.equals(lub(Negative, Negative)))
    assert(Zero.equals(lub(Zero, Zero)))
    assert(One.equals(lub(One, One)))
    assert(GTOne.equals(lub(GTOne, GTOne)))
    assert(ES01Top.equals(lub(Negative, Zero)))
    assert(ES01Top.equals(lub(Zero, Negative)))
    assert(ES01Top.equals(lub(One, Negative)))
    assert(ES01Top.equals(lub(Negative, One)))
    assert(ES01Top.equals(lub(GTOne, Negative)))
    assert(ES01Top.equals(lub(Negative, GTOne)))
    assert(ES01Top.equals(lub(Zero, One)))
    assert(ES01Top.equals(lub(One, Zero)))
    assert(ES01Top.equals(lub(Zero, GTOne)))
    assert(ES01Top.equals(lub(GTOne, Zero)))
    assert(ES01Top.equals(lub(One, GTOne)))
    assert(ES01Top.equals(lub(GTOne, One)))
    assert(ES01Top.equals(lub(Negative, ES01Top)))
    assert(ES01Top.equals(lub(Zero, ES01Top)))
    assert(ES01Top.equals(lub(One, ES01Top)))
    assert(ES01Top.equals(lub(GTOne, ES01Top)))
    assert(ES01Top.equals(lub(ES01Top, Negative)))
    assert(ES01Top.equals(lub(ES01Top, Zero)))
    assert(ES01Top.equals(lub(ES01Top, One)))
    assert(ES01Top.equals(lub(ES01Top, GTOne)))
    assert(Negative.equals(lub(Negative, ES01Bottom)))
    assert(Zero.equals(lub(Zero, ES01Bottom)))
    assert(One.equals(lub(One, ES01Bottom)))
    assert(GTOne.equals(lub(GTOne, ES01Bottom)))
    assert(Negative.equals(lub(ES01Bottom, Negative)))
    assert(Zero.equals(lub(ES01Bottom, Zero)))
    assert(One.equals(lub(ES01Bottom, One)))
    assert(GTOne.equals(lub(ES01Bottom, GTOne)))
  }

  test("glb") {
    assert(Negative.equals(glb(Negative, Negative)))
    assert(Zero.equals(glb(Zero, Zero)))
    assert(One.equals(glb(One, One)))
    assert(GTOne.equals(glb(GTOne, GTOne)))
    assert(ES01Bottom.equals(glb(Negative, Zero)))
    assert(ES01Bottom.equals(glb(Zero, Negative)))
    assert(ES01Bottom.equals(glb(One, Negative)))
    assert(ES01Bottom.equals(glb(Negative, One)))
    assert(ES01Bottom.equals(glb(GTOne, Negative)))
    assert(ES01Bottom.equals(glb(Negative, GTOne)))
    assert(ES01Bottom.equals(glb(Zero, One)))
    assert(ES01Bottom.equals(glb(One, Zero)))
    assert(ES01Bottom.equals(glb(Zero, GTOne)))
    assert(ES01Bottom.equals(glb(GTOne, Zero)))
    assert(ES01Bottom.equals(glb(One, GTOne)))
    assert(ES01Bottom.equals(glb(GTOne, One)))
    assert(Negative.equals(glb(Negative, ES01Top)))
    assert(Zero.equals(glb(Zero, ES01Top)))
    assert(One.equals(glb(One, ES01Top)))
    assert(GTOne.equals(glb(GTOne, ES01Top)))
    assert(Negative.equals(glb(ES01Top, Negative)))
    assert(Zero.equals(glb(ES01Top, Zero)))
    assert(One.equals(glb(ES01Top, One)))
    assert(GTOne.equals(glb(ES01Top, GTOne)))
    assert(ES01Bottom.equals(glb(Negative, ES01Bottom)))
    assert(ES01Bottom.equals(glb(Zero, ES01Bottom)))
    assert(ES01Bottom.equals(glb(One, ES01Bottom)))
    assert(ES01Bottom.equals(glb(GTOne, ES01Bottom)))
    assert(ES01Bottom.equals(glb(ES01Bottom, Negative)))
    assert(ES01Bottom.equals(glb(ES01Bottom, Zero)))
    assert(ES01Bottom.equals(glb(ES01Bottom, One)))
    assert(ES01Bottom.equals(glb(ES01Bottom, GTOne)))
  }

  test("compare") {
    assert(Option(0).equals(compare(Negative, Negative)))
    assert(Option(0).equals(compare(Zero, Zero)))
    assert(Option(0).equals(compare(One, One)))
    assert(Option(0).equals(compare(GTOne, GTOne)))
    assert(Option.empty.equals(compare(Negative, Zero)))
    assert(Option.empty.equals(compare(Zero, Negative)))
    assert(Option.empty.equals(compare(One, Negative)))
    assert(Option.empty.equals(compare(Negative, One)))
    assert(Option.empty.equals(compare(GTOne, Negative)))
    assert(Option.empty.equals(compare(Negative, GTOne)))
    assert(Option.empty.equals(compare(Zero, One)))
    assert(Option.empty.equals(compare(One, Zero)))
    assert(Option.empty.equals(compare(Zero, GTOne)))
    assert(Option.empty.equals(compare(GTOne, Zero)))
    assert(Option.empty.equals(compare(One, GTOne)))
    assert(Option.empty.equals(compare(GTOne, One)))
    assert(Option(-1).equals(compare(Negative, ES01Top)))
    assert(Option(-1).equals(compare(Zero, ES01Top)))
    assert(Option(-1).equals(compare(One, ES01Top)))
    assert(Option(-1).equals(compare(GTOne, ES01Top)))
    assert(Option(1).equals(compare(ES01Top, Negative)))
    assert(Option(1).equals(compare(ES01Top, Zero)))
    assert(Option(1).equals(compare(ES01Top, One)))
    assert(Option(1).equals(compare(ES01Top, GTOne)))
    assert(Option(1).equals(compare(Negative, ES01Bottom)))
    assert(Option(1).equals(compare(Zero, ES01Bottom)))
    assert(Option(1).equals(compare(One, ES01Bottom)))
    assert(Option(1).equals(compare(GTOne, ES01Bottom)))
    assert(Option(-1).equals(compare(ES01Bottom, Negative)))
    assert(Option(-1).equals(compare(ES01Bottom, Zero)))
    assert(Option(-1).equals(compare(ES01Bottom, One)))
    assert(Option(-1).equals(compare(ES01Bottom, GTOne)))
  }

}
