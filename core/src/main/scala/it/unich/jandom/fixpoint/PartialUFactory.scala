/**
 * Copyright 2015 Gianluca Amato <gamato@unich.it>
 *
 * This file is part of JANDOM: JVM-based Analyzer for Numerical DOMains
 * JANDOM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * JANDOM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty ofa
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with JANDOM.  If not, see <http://www.gnu.org/licenses/>.
 */

package it.unich.jandom.fixpoint

import java.util.NoSuchElementException

/**
 * A PartialUFactory is like an UFactory, but it may be explicitly queried for the collection of elements
 * which are in its domain.
 */
abstract class PartialUFactory[Unknown, +T] extends UFactory[Unknown, T] {
  /**
   * The domain of definition of the factory.
   */
  def domain: Iterable[Unknown]
  
  /**
   * Prints a sequence of all the bindings in this partial factory.
   */
  override def toString = (for ( u <- domain ) yield s"${u} -> ${apply(u)}").mkString("[", " ,", "]")
}

object PartialUFactory {
  /**
   * A partial factory generated by a map.
   */
  implicit class fromMap[Unknown, T](m: collection.Map[Unknown, T]) extends PartialUFactory[Unknown,T] {
    def apply(x: Unknown) = m(x)
    def domain = m.keySet
  }
  
  /**
   * Returns an empty partial factory.
   */
  def empty[Unknown, T] = new PartialUFactory[Unknown, T] {
    def apply(x: Unknown) = throw new NoSuchElementException("argument not found: " + x)
    def domain = Iterable.empty[Unknown]
  }
}
