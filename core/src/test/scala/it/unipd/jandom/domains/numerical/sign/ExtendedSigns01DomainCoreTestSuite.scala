package it.unipd.jandom.domains.numerical.sign

import it.unipd.jandom.domains.numerical.sign.ES01._
import org.scalatest.FunSuite

/**
  * Note: hereafter, ES01 will stand for ExtendedSigns01Domain.
  * Unit Test - Sign Domain extended with 0, 1.
  *
  * @author Mirko Bez <mirko.bez@studenti.unipd.it>
  * @author Stefano Munari <stefano.munari.1@studenti.unipd.it>
  * @author Sebastiano Valle <sebastiano.valle@studenti.unipd.it>
  */
class ExtendedSigns01DomainCoreTestSuite extends FunSuite {

  val core = ExtendedSigns01DomainCore()

  test("toES01") {
    assert(Zero.equals(core.alpha(0)))
    assert(One.equals(core.alpha(1)))
    assert(GTOne.equals(core.alpha(2)))
    assert(GTOne.equals(core.alpha(100)))
    assert(Negative.equals(core.alpha(-1)))
    assert(Negative.equals(core.alpha(-1000)))
  }

  test("inverse") {
    assert(ES01Top.equals(core.inverse(Negative)))
    assert(Zero.equals(core.inverse(Zero)))
    assert(Negative.equals(core.inverse(One)))
    assert(Negative.equals(core.inverse(GTOne)))
    assert(ES01Top.equals(core.inverse(ES01Top)))
    assert(ES01Bottom.equals(core.inverse(ES01Bottom)))
  }

  test("sum") {
    assert(Negative.equals(core.sum(Negative, Negative)))
    assert(Zero.equals(core.sum(Zero, Zero)))
    assert(GTOne.equals(core.sum(One, One)))
    assert(GTOne.equals(core.sum(GTOne, GTOne)))
    assert(Negative.equals(core.sum(Negative, Zero)))
    assert(Negative.equals(core.sum(Zero, Negative)))
    assert(ES01Top.equals(core.sum(One, Negative)))
    assert(ES01Top.equals(core.sum(Negative, One)))
    assert(ES01Top.equals(core.sum(GTOne, Negative)))
    assert(ES01Top.equals(core.sum(Negative, GTOne)))
    assert(One.equals(core.sum(Zero, One)))
    assert(One.equals(core.sum(One, Zero)))
    assert(GTOne.equals(core.sum(Zero, GTOne)))
    assert(GTOne.equals(core.sum(GTOne, Zero)))
    assert(GTOne.equals(core.sum(One, GTOne)))
    assert(GTOne.equals(core.sum(GTOne, One)))
    assert(ES01Top.equals(core.sum(Negative, ES01Top)))
    assert(ES01Top.equals(core.sum(Zero, ES01Top)))
    assert(ES01Top.equals(core.sum(One, ES01Top)))
    assert(ES01Top.equals(core.sum(GTOne, ES01Top)))
    assert(ES01Top.equals(core.sum(ES01Top, Negative)))
    assert(ES01Top.equals(core.sum(ES01Top, Zero)))
    assert(ES01Top.equals(core.sum(ES01Top, One)))
    assert(ES01Top.equals(core.sum(ES01Top, GTOne)))
    assert(ES01Bottom.equals(core.sum(Negative, ES01Bottom)))
    assert(ES01Bottom.equals(core.sum(Zero, ES01Bottom)))
    assert(ES01Bottom.equals(core.sum(One, ES01Bottom)))
    assert(ES01Bottom.equals(core.sum(GTOne, ES01Bottom)))
    assert(ES01Bottom.equals(core.sum(ES01Bottom, Negative)))
    assert(ES01Bottom.equals(core.sum(ES01Bottom, Zero)))
    assert(ES01Bottom.equals(core.sum(ES01Bottom, One)))
    assert(ES01Bottom.equals(core.sum(ES01Bottom, GTOne)))
  }

  test("mult") {
    assert(ES01Top.equals(core.mult(Negative, Negative)))
    assert(Zero.equals(core.mult(Zero, Zero)))
    assert(One.equals(core.mult(One, One)))
    assert(GTOne.equals(core.mult(GTOne, GTOne)))
    assert(Zero.equals(core.mult(Negative, Zero)))
    assert(Zero.equals(core.mult(Zero, Negative)))
    assert(Negative.equals(core.mult(One, Negative)))
    assert(Negative.equals(core.mult(Negative, One)))
    assert(Negative.equals(core.mult(GTOne, Negative)))
    assert(Negative.equals(core.mult(Negative, GTOne)))
    assert(Zero.equals(core.mult(Zero, One)))
    assert(Zero.equals(core.mult(One, Zero)))
    assert(Zero.equals(core.mult(Zero, GTOne)))
    assert(Zero.equals(core.mult(GTOne, Zero)))
    assert(GTOne.equals(core.mult(One, GTOne)))
    assert(GTOne.equals(core.mult(GTOne, One)))
    assert(ES01Top.equals(core.mult(Negative, ES01Top)))
    assert(Zero.equals(core.mult(Zero, ES01Top)))
    assert(ES01Top.equals(core.mult(One, ES01Top)))
    assert(ES01Top.equals(core.mult(GTOne, ES01Top)))
    assert(ES01Top.equals(core.mult(ES01Top, Negative)))
    assert(Zero.equals(core.mult(ES01Top, Zero)))
    assert(ES01Top.equals(core.mult(ES01Top, One)))
    assert(ES01Top.equals(core.mult(ES01Top, GTOne)))
    assert(ES01Bottom.equals(core.mult(Negative, ES01Bottom)))
    assert(ES01Bottom.equals(core.mult(Zero, ES01Bottom)))
    assert(ES01Bottom.equals(core.mult(One, ES01Bottom)))
    assert(ES01Bottom.equals(core.mult(GTOne, ES01Bottom)))
    assert(ES01Bottom.equals(core.mult(ES01Bottom, Negative)))
    assert(ES01Bottom.equals(core.mult(ES01Bottom, Zero)))
    assert(ES01Bottom.equals(core.mult(ES01Bottom, One)))
    assert(ES01Bottom.equals(core.mult(ES01Bottom, GTOne)))
  }

  test("core.division") {
    assert(ES01Top.equals(core.division(Negative, Negative)))
    assert(ES01Bottom.equals(core.division(Zero, Zero)))
    assert(One.equals(core.division(One, One)))
    assert(ES01Top.equals(core.division(GTOne, GTOne)))
    assert(ES01Bottom.equals(core.division(Negative, Zero)))
    assert(Zero.equals(core.division(Zero, Negative)))
    assert(ES01Top.equals(core.division(One, Negative)))
    assert(Negative.equals(core.division(Negative, One)))
    assert(ES01Top.equals(core.division(GTOne, Negative)))
    assert(ES01Top.equals(core.division(Negative, GTOne)))
    assert(Zero.equals(core.division(Zero, One)))
    assert(ES01Bottom.equals(core.division(One, Zero)))
    assert(Zero.equals(core.division(Zero, GTOne)))
    assert(ES01Bottom.equals(core.division(GTOne, Zero)))
    assert(Zero.equals(core.division(One, GTOne)))
    assert(GTOne.equals(core.division(GTOne, One)))
    assert(ES01Top.equals(core.division(Negative, ES01Top)))
    assert(Zero.equals(core.division(Zero, ES01Top)))
    assert(ES01Top.equals(core.division(One, ES01Top)))
    assert(ES01Top.equals(core.division(GTOne, ES01Top)))
    assert(ES01Top.equals(core.division(ES01Top, Negative)))
    assert(ES01Bottom.equals(core.division(ES01Top, Zero)))
    assert(ES01Top.equals(core.division(ES01Top, One)))
    assert(ES01Top.equals(core.division(ES01Top, GTOne)))
    assert(ES01Bottom.equals(core.division(Negative, ES01Bottom)))
    assert(ES01Bottom.equals(core.division(Zero, ES01Bottom)))
    assert(ES01Bottom.equals(core.division(One, ES01Bottom)))
    assert(ES01Bottom.equals(core.division(GTOne, ES01Bottom)))
    assert(ES01Bottom.equals(core.division(ES01Bottom, Negative)))
    assert(ES01Bottom.equals(core.division(ES01Bottom, Zero)))
    assert(ES01Bottom.equals(core.division(ES01Bottom, One)))
    assert(ES01Bottom.equals(core.division(ES01Bottom, GTOne)))
  }

  test("core.remainder") {
    assert(ES01Top.equals(core.remainder(Negative, Negative)))
    assert(ES01Bottom.equals(core.remainder(Zero, Zero)))
    assert(Zero.equals(core.remainder(One, One)))
    assert(ES01Top.equals(core.remainder(GTOne, GTOne)))
    assert(ES01Bottom.equals(core.remainder(Negative, Zero)))
    assert(Zero.equals(core.remainder(Zero, Negative)))
    assert(ES01Top.equals(core.remainder(One, Negative)))
    assert(Zero.equals(core.remainder(Negative, One)))
    assert(ES01Top.equals(core.remainder(GTOne, Negative)))
    assert(ES01Top.equals(core.remainder(Negative, GTOne)))
    assert(Zero.equals(core.remainder(Zero, One)))
    assert(ES01Bottom.equals(core.remainder(One, Zero)))
    assert(Zero.equals(core.remainder(Zero, GTOne)))
    assert(ES01Bottom.equals(core.remainder(GTOne, Zero)))
    assert(One.equals(core.remainder(One, GTOne)))
    assert(Zero.equals(core.remainder(GTOne, One)))
    assert(ES01Top.equals(core.remainder(Negative, ES01Top)))
    assert(Zero.equals(core.remainder(Zero, ES01Top)))
    assert(ES01Top.equals(core.remainder(One, ES01Top)))
    assert(ES01Top.equals(core.remainder(GTOne, ES01Top)))
    assert(ES01Top.equals(core.remainder(ES01Top, Negative)))
    assert(ES01Bottom.equals(core.remainder(ES01Top, Zero)))
    assert(Zero.equals(core.remainder(ES01Top, One)))
    assert(ES01Top.equals(core.remainder(ES01Top, GTOne)))
    assert(ES01Bottom.equals(core.remainder(Negative, ES01Bottom)))
    assert(ES01Bottom.equals(core.remainder(Zero, ES01Bottom)))
    assert(ES01Bottom.equals(core.remainder(One, ES01Bottom)))
    assert(ES01Bottom.equals(core.remainder(GTOne, ES01Bottom)))
    assert(ES01Bottom.equals(core.remainder(ES01Bottom, Negative)))
    assert(ES01Bottom.equals(core.remainder(ES01Bottom, Zero)))
    assert(ES01Bottom.equals(core.remainder(ES01Bottom, One)))
    assert(ES01Bottom.equals(core.remainder(ES01Bottom, GTOne)))
  }

  test("core.lub") {
    assert(Negative.equals(core.lub(Negative, Negative)))
    assert(Zero.equals(core.lub(Zero, Zero)))
    assert(One.equals(core.lub(One, One)))
    assert(GTOne.equals(core.lub(GTOne, GTOne)))
    assert(ES01Top.equals(core.lub(Negative, Zero)))
    assert(ES01Top.equals(core.lub(Zero, Negative)))
    assert(ES01Top.equals(core.lub(One, Negative)))
    assert(ES01Top.equals(core.lub(Negative, One)))
    assert(ES01Top.equals(core.lub(GTOne, Negative)))
    assert(ES01Top.equals(core.lub(Negative, GTOne)))
    assert(ES01Top.equals(core.lub(Zero, One)))
    assert(ES01Top.equals(core.lub(One, Zero)))
    assert(ES01Top.equals(core.lub(Zero, GTOne)))
    assert(ES01Top.equals(core.lub(GTOne, Zero)))
    assert(ES01Top.equals(core.lub(One, GTOne)))
    assert(ES01Top.equals(core.lub(GTOne, One)))
    assert(ES01Top.equals(core.lub(Negative, ES01Top)))
    assert(ES01Top.equals(core.lub(Zero, ES01Top)))
    assert(ES01Top.equals(core.lub(One, ES01Top)))
    assert(ES01Top.equals(core.lub(GTOne, ES01Top)))
    assert(ES01Top.equals(core.lub(ES01Top, Negative)))
    assert(ES01Top.equals(core.lub(ES01Top, Zero)))
    assert(ES01Top.equals(core.lub(ES01Top, One)))
    assert(ES01Top.equals(core.lub(ES01Top, GTOne)))
    assert(Negative.equals(core.lub(Negative, ES01Bottom)))
    assert(Zero.equals(core.lub(Zero, ES01Bottom)))
    assert(One.equals(core.lub(One, ES01Bottom)))
    assert(GTOne.equals(core.lub(GTOne, ES01Bottom)))
    assert(Negative.equals(core.lub(ES01Bottom, Negative)))
    assert(Zero.equals(core.lub(ES01Bottom, Zero)))
    assert(One.equals(core.lub(ES01Bottom, One)))
    assert(GTOne.equals(core.lub(ES01Bottom, GTOne)))
  }

  test("core.glb") {
    assert(Negative.equals(core.glb(Negative, Negative)))
    assert(Zero.equals(core.glb(Zero, Zero)))
    assert(One.equals(core.glb(One, One)))
    assert(GTOne.equals(core.glb(GTOne, GTOne)))
    assert(ES01Bottom.equals(core.glb(Negative, Zero)))
    assert(ES01Bottom.equals(core.glb(Zero, Negative)))
    assert(ES01Bottom.equals(core.glb(One, Negative)))
    assert(ES01Bottom.equals(core.glb(Negative, One)))
    assert(ES01Bottom.equals(core.glb(GTOne, Negative)))
    assert(ES01Bottom.equals(core.glb(Negative, GTOne)))
    assert(ES01Bottom.equals(core.glb(Zero, One)))
    assert(ES01Bottom.equals(core.glb(One, Zero)))
    assert(ES01Bottom.equals(core.glb(Zero, GTOne)))
    assert(ES01Bottom.equals(core.glb(GTOne, Zero)))
    assert(ES01Bottom.equals(core.glb(One, GTOne)))
    assert(ES01Bottom.equals(core.glb(GTOne, One)))
    assert(Negative.equals(core.glb(Negative, ES01Top)))
    assert(Zero.equals(core.glb(Zero, ES01Top)))
    assert(One.equals(core.glb(One, ES01Top)))
    assert(GTOne.equals(core.glb(GTOne, ES01Top)))
    assert(Negative.equals(core.glb(ES01Top, Negative)))
    assert(Zero.equals(core.glb(ES01Top, Zero)))
    assert(One.equals(core.glb(ES01Top, One)))
    assert(GTOne.equals(core.glb(ES01Top, GTOne)))
    assert(ES01Bottom.equals(core.glb(Negative, ES01Bottom)))
    assert(ES01Bottom.equals(core.glb(Zero, ES01Bottom)))
    assert(ES01Bottom.equals(core.glb(One, ES01Bottom)))
    assert(ES01Bottom.equals(core.glb(GTOne, ES01Bottom)))
    assert(ES01Bottom.equals(core.glb(ES01Bottom, Negative)))
    assert(ES01Bottom.equals(core.glb(ES01Bottom, Zero)))
    assert(ES01Bottom.equals(core.glb(ES01Bottom, One)))
    assert(ES01Bottom.equals(core.glb(ES01Bottom, GTOne)))
  }

  test("core.compare") {
    assert(Option(0).equals(core.compare(Negative, Negative)))
    assert(Option(0).equals(core.compare(Zero, Zero)))
    assert(Option(0).equals(core.compare(One, One)))
    assert(Option(0).equals(core.compare(GTOne, GTOne)))
    assert(Option.empty.equals(core.compare(Negative, Zero)))
    assert(Option.empty.equals(core.compare(Zero, Negative)))
    assert(Option.empty.equals(core.compare(One, Negative)))
    assert(Option.empty.equals(core.compare(Negative, One)))
    assert(Option.empty.equals(core.compare(GTOne, Negative)))
    assert(Option.empty.equals(core.compare(Negative, GTOne)))
    assert(Option.empty.equals(core.compare(Zero, One)))
    assert(Option.empty.equals(core.compare(One, Zero)))
    assert(Option.empty.equals(core.compare(Zero, GTOne)))
    assert(Option.empty.equals(core.compare(GTOne, Zero)))
    assert(Option.empty.equals(core.compare(One, GTOne)))
    assert(Option.empty.equals(core.compare(GTOne, One)))
    assert(Option(-1).equals(core.compare(Negative, ES01Top)))
    assert(Option(-1).equals(core.compare(Zero, ES01Top)))
    assert(Option(-1).equals(core.compare(One, ES01Top)))
    assert(Option(-1).equals(core.compare(GTOne, ES01Top)))
    assert(Option(1).equals(core.compare(ES01Top, Negative)))
    assert(Option(1).equals(core.compare(ES01Top, Zero)))
    assert(Option(1).equals(core.compare(ES01Top, One)))
    assert(Option(1).equals(core.compare(ES01Top, GTOne)))
    assert(Option(1).equals(core.compare(Negative, ES01Bottom)))
    assert(Option(1).equals(core.compare(Zero, ES01Bottom)))
    assert(Option(1).equals(core.compare(One, ES01Bottom)))
    assert(Option(1).equals(core.compare(GTOne, ES01Bottom)))
    assert(Option(-1).equals(core.compare(ES01Bottom, Negative)))
    assert(Option(-1).equals(core.compare(ES01Bottom, Zero)))
    assert(Option(-1).equals(core.compare(ES01Bottom, One)))
    assert(Option(-1).equals(core.compare(ES01Bottom, GTOne)))
  }

}
